//
// Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
Gateway = module.exports.Gateway = function(args) {
  this.ip = null;
  this.gateway = null;
  this.netmask = null;
  this.thriftPort = 9521;
  this.thriftRemoteIp = null;
  this.thriftRemotePort = 9522;
  if (args) {
    if (args.ip !== undefined) {
      this.ip = args.ip;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ip is unset!');
    }
    if (args.gateway !== undefined) {
      this.gateway = args.gateway;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field gateway is unset!');
    }
    if (args.netmask !== undefined) {
      this.netmask = args.netmask;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field netmask is unset!');
    }
    if (args.thriftPort !== undefined) {
      this.thriftPort = args.thriftPort;
    }
    if (args.thriftRemoteIp !== undefined) {
      this.thriftRemoteIp = args.thriftRemoteIp;
    }
    if (args.thriftRemotePort !== undefined) {
      this.thriftRemotePort = args.thriftRemotePort;
    }
  }
};
Gateway.prototype = {};
Gateway.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.gateway = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.netmask = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.thriftPort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.thriftRemoteIp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.thriftRemotePort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gateway.prototype.write = function(output) {
  output.writeStructBegin('Gateway');
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 1);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.gateway !== null && this.gateway !== undefined) {
    output.writeFieldBegin('gateway', Thrift.Type.STRING, 2);
    output.writeString(this.gateway);
    output.writeFieldEnd();
  }
  if (this.netmask !== null && this.netmask !== undefined) {
    output.writeFieldBegin('netmask', Thrift.Type.STRING, 3);
    output.writeString(this.netmask);
    output.writeFieldEnd();
  }
  if (this.thriftPort !== null && this.thriftPort !== undefined) {
    output.writeFieldBegin('thriftPort', Thrift.Type.I32, 4);
    output.writeI32(this.thriftPort);
    output.writeFieldEnd();
  }
  if (this.thriftRemoteIp !== null && this.thriftRemoteIp !== undefined) {
    output.writeFieldBegin('thriftRemoteIp', Thrift.Type.STRING, 5);
    output.writeString(this.thriftRemoteIp);
    output.writeFieldEnd();
  }
  if (this.thriftRemotePort !== null && this.thriftRemotePort !== undefined) {
    output.writeFieldBegin('thriftRemotePort', Thrift.Type.I32, 6);
    output.writeI32(this.thriftRemotePort);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

